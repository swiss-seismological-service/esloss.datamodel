from sqlalchemy.orm import relationship
from sqlalchemy.sql.schema import Column, ForeignKey
from sqlalchemy.sql.sqltypes import BigInteger, Float, String
from sqlalchemy.dialects.postgresql import ARRAY
from esloss.datamodel.mixins import PublicIdMixin, ClassificationMixin
from esloss.datamodel.base import ORMBase


class VulnerabilityModel(PublicIdMixin, ORMBase):
    """Vulnerability model"""
    name = Column(String, nullable=False)
    description = Column(String)
    assetcategory = Column(String)

    vulnerabilityfunctions = relationship(
        'VulnerabilityFunction',
        back_populates='vulnerabilitymodel',
        cascade='all, delete-orphan',
        passive_deletes=True,
        lazy='joined')

    # riskcalculation = relationship('RiskCalculation', back_populates)

    _type = Column(String(50))

    __mapper_args__ = {
        "polymorphic_on": _type,
        "polymorphic_identity": "vulnerabilitymodel",
    }


# class OccupantsVulnerabilityModel(VulnerabilityModel):
#     __tablename__ = 'loss_occupantsvulnerabilitymodel'

#     riskcalculation_occupance = relationship(
#         'RiskCalculation', back_populates='occupantsvulnerabilitymodel')

#     __mapper_args__ = {
#         "polymorphic_identity": "occupantsvulnerabilitymodel",
#     }


class VulnerabilityFunction(ClassificationMixin('taxonomy'), ORMBase):
    """Vulnerability Function Model"""

    _vulnerabilitymodel_oid = Column(
        BigInteger,
        ForeignKey('loss_vulnerabilitymodel._oid', ondelete='CASCADE'))
    vulnerabilitymodel = relationship(
        'VulnerabilityModel',
        back_populates='vulnerabilityfunctions')

    distribution = Column(String, nullable=False)
    intensitymeasuretype = Column(String, nullable=False)

    lossratiovariables = relationship('ConditionalLossRatio',
                                      back_populates='vulnerabilityfunction',
                                      passive_deletes=True,
                                      cascade='all, delete-orphan')


class ConditionalLossRatio(ORMBase):
    intensitymeasurelevel = Column(Float)
    meanlossratio = Column(Float)
    covlossratio = Column(Float)
    pmf_variable = Column(ARRAY(Float))
    pmf_probability = Column(ARRAY(Float))

    _vulnerabilityfunction_oid = Column(BigInteger, ForeignKey(
        'loss_vulnerabilityfunction._oid', ondelete='CASCADE'))
    vulnerabilityfunction = relationship('VulnerabilityFunction',
                                         back_populates='lossratiovariables')
